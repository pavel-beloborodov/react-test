{"version":3,"sources":["features/planets/PlanetEditorModal/components/PlanetForm/PlanetForm.module.scss","store/features/planets/PlanetsActionTypes.ts","store/features/films/FilmsActionTypes.ts","store/features/residents/ResidentsActionTypes.ts","store/features/planets/PlanetsActions.ts","components/IconButton/IconButton.module.scss","components/IconButton/IconButton.tsx","store/features/films/FilmsActions.ts","store/features/residents/ResidentsActions.ts","features/planets/PlanetEditorModal/components/PlanetForm/PlanetFormConst.ts","features/planets/PlanetEditorModal/components/PlanetForm/PlanetFormValidator.ts","assets/clear.svg","features/planets/PlanetEditorModal/components/PlanetForm/PlanetForm.tsx","features/planets/PlanetEditorModal/PlanetEditorModal.tsx","App.tsx","reportWebVitals.ts","store/features/films/FilmsReducer.ts","store/features/planets/PlanetsReducer.ts","store/features/residents/ResidentsReducer.ts","store/rootReducer.ts","network/api.ts","store/common/extractId.ts","store/features/films/FilmsSagas.ts","store/features/planets/PlanetsSagas.ts","store/features/residents/ResidentsSagas.ts","store/rootSagas.ts","store/index.ts","index.tsx"],"names":["module","exports","FETCH_PLANET_REQUEST","FETCH_PLANET_SUCCESS","FETCH_PLANET_LIST_REQUEST","FETCH_PLANET_LIST_SUCCESS","FETCH_FILM_LIST_REQUEST","FETCH_FILM_LIST_SUCCESS","FETCH_RESIDENT_LIST_REQUEST","FETCH_RESIDENT_LIST_SUCCESS","fetchPlanetListRequest","page","type","payload","fetchPlanetListSuccess","fetchPlanetRequest","id","fetchPlanetSuccess","IconButton","Icon","invert","className","rest","cn","styles","button","React","memo","fetchFilmListSuccess","fetchFilmListRequest","fetchResidentListSuccess","fetchResidentListRequest","TERRAIN_VALUES","PLANET_HEADERS","name","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","film_count","residents_count","validatePlanet","values","errors","length","_extends","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","d","SvgClear","_ref","svgRef","title","titleId","props","width","height","viewBox","ref","undefined","ForwardRef","FormInput","render","input","meta","formElement","htmlFor","formElementLabel","formInput","touched","error","submitError","formErrorLabel","PlanetForm","planet","onCloseClick","onSubmit","handleSubmit","useCallback","a","join","initialValues","useMemo","split","formContainer","validate","submitting","pristine","form","formHeader","CloseIcon","onClick","multiple","map","item","value","buttonsBlock","reset","disabled","actionButton","MODAL_STYLES","content","top","left","right","bottom","marginRight","transform","border","borderRadius","boxShadow","connect","state","ownProps","planetId","URLSearchParams","location","search","get","planets","planetById","dispatch","fetchPlanetDetails","history","closeModal","queryParams","delete","replace","toString","Promise","resolve","setTimeout","useEffect","isOpen","onRequestClose","style","Planets","lazy","PlanetDetails","Films","Residents","App","fallback","exact","path","component","to","PlanetEditorModal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","filmById","nextPage","planetsIds","residentById","rootReducer","combineReducers","action","reduce","result","planetIds","residents","films","API","axios","create","baseURL","extractId","found","match","extractPageNumber","parseInt","fetchFilmsSaga","filmsSagas","ids","all","response","filmsByIds","data","url","put","console","log","takeEvery","fetchPlanetsSaga","fetchPlanetDetailsSaga","planetsSagas","mapToState","residentsIds","filmsIds","results","next","filter","Boolean","nextPageNumber","fetchResidentsSaga","residentsSagas","residentsByIds","watchAllSagas","configureStore","initialState","saga","createSagaMiddleware","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","createStore","run","createBrowserHistory","Modal","setAppElement","document","querySelector","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6972aafc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"PlanetForm_formContainer__1RWKz\",\"formHeader\":\"PlanetForm_formHeader__261ta\",\"buttonsBlock\":\"PlanetForm_buttonsBlock__FKFYz\",\"formErrorLabel\":\"PlanetForm_formErrorLabel__2p-FY\",\"formElement\":\"PlanetForm_formElement__35UyY\",\"formElementLabel\":\"PlanetForm_formElementLabel__3Ayxz\",\"formInput\":\"PlanetForm_formInput__3xY9x\",\"actionButton\":\"PlanetForm_actionButton__eGZJG\"};","export const FETCH_PLANET_REQUEST = \"FETCH_PLANET_REQUEST\";\nexport const FETCH_PLANET_SUCCESS = \"FETCH_PLANET_SUCCESS\";\n\nexport const FETCH_PLANET_LIST_REQUEST = \"FETCH_PLANET_LIST_REQUEST\";\nexport const FETCH_PLANET_LIST_SUCCESS = \"FETCH_PLANET_LIST_SUCCESS\";\n","export const FETCH_FILM_LIST_REQUEST = \"FETCH_FILM_LIST_REQUEST\";\nexport const FETCH_FILM_LIST_SUCCESS = \"FETCH_FILM_LIST_SUCCESS\";\n","export const FETCH_RESIDENT_LIST_REQUEST = \"FETCH_RESIDENTS_REQUEST\";\nexport const FETCH_RESIDENT_LIST_SUCCESS = \"FETCH_RESIDENTS_SUCCESS\";\n","import {\n  FETCH_PLANET_LIST_REQUEST,\n  FETCH_PLANET_LIST_SUCCESS,\n  FETCH_PLANET_REQUEST,\n  FETCH_PLANET_SUCCESS,\n} from \"./PlanetsActionTypes\";\nimport { Planet } from \"./PlanetsModel\";\n\n// LIST ACTIONS\n\nexport interface UpdatePlanetListAction {\n  type: typeof FETCH_PLANET_LIST_SUCCESS;\n  payload: {\n    planets: Planet[];\n    nextPage: number | null;\n  };\n}\n\nexport interface RequestPlanetListAction {\n  type: typeof FETCH_PLANET_LIST_REQUEST;\n  payload: {\n    page: number;\n  };\n}\n\nexport const fetchPlanetListRequest = (\n  page: number\n): RequestPlanetListAction => ({\n  type: FETCH_PLANET_LIST_REQUEST,\n  payload: { page },\n});\n\nexport const fetchPlanetListSuccess = (payload: {\n  planets: Planet[];\n  nextPage: number | null;\n}): UpdatePlanetListAction => ({\n  type: FETCH_PLANET_LIST_SUCCESS,\n  payload,\n});\n\n// SINGLE ACTIONS\n\nexport interface UpdatePlanetAction {\n  type: typeof FETCH_PLANET_SUCCESS;\n  payload: Planet;\n}\n\nexport interface RequestPlanetAction {\n  type: typeof FETCH_PLANET_REQUEST;\n  payload: string;\n}\n\nexport const fetchPlanetRequest = (id: string): RequestPlanetAction => ({\n  type: FETCH_PLANET_REQUEST,\n  payload: id,\n});\n\nexport const fetchPlanetSuccess = (payload: Planet): UpdatePlanetAction => ({\n  type: FETCH_PLANET_SUCCESS,\n  payload,\n});\n\nexport type PlanetsActions =\n  | UpdatePlanetListAction\n  | RequestPlanetListAction\n  | UpdatePlanetAction\n  | RequestPlanetAction;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"IconButton_button__1BPZn\",\"invert\":\"IconButton_invert__3fwWT\"};","import React from \"react\";\nimport styles from \"./IconButton.module.scss\";\nimport cn from \"classnames\";\n\ninterface IconButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  className?: string;\n  Icon: React.FunctionComponent;\n  invert?: boolean;\n}\n\nfunction IconButton({ Icon, invert, className, ...rest }: IconButtonProps) {\n  return (\n    <button\n      className={cn(styles.button, className, { [styles.invert]: invert })}\n      {...rest}\n    >\n      <Icon />\n    </button>\n  );\n}\n\nexport default React.memo(IconButton);\n","import {\n  FETCH_FILM_LIST_SUCCESS,\n  FETCH_FILM_LIST_REQUEST,\n} from \"./FilmsActionTypes\";\nimport { FilmsMap } from \"./FilmsModel\";\n\nexport interface FetchFilmListRequest {\n  type: typeof FETCH_FILM_LIST_REQUEST;\n  payload: string[];\n}\n\nexport interface FetchFilmListSuccess {\n  type: typeof FETCH_FILM_LIST_SUCCESS;\n  payload: FilmsMap;\n}\n\nexport const fetchFilmListSuccess = (\n  payload: FilmsMap\n): FetchFilmListSuccess => ({\n  type: FETCH_FILM_LIST_SUCCESS,\n  payload,\n});\n\nexport const fetchFilmListRequest = (\n  payload: string[]\n): FetchFilmListRequest => ({\n  type: FETCH_FILM_LIST_REQUEST,\n  payload,\n});\n\nexport type FilmsActions = FetchFilmListRequest | FetchFilmListSuccess;\n","import {\n  FETCH_RESIDENT_LIST_SUCCESS,\n  FETCH_RESIDENT_LIST_REQUEST,\n} from \"./ResidentsActionTypes\";\nimport { ResidentsMap } from \"./ResidentsModel\";\n\nexport interface FetchResidentListAction {\n  type: typeof FETCH_RESIDENT_LIST_REQUEST;\n  payload: string[];\n}\n\nexport interface FetchResidentListSuccess {\n  type: typeof FETCH_RESIDENT_LIST_SUCCESS;\n  payload: ResidentsMap;\n}\n\nexport const fetchResidentListSuccess = (\n  payload: ResidentsMap\n): FetchResidentListSuccess => ({\n  type: FETCH_RESIDENT_LIST_SUCCESS,\n  payload,\n});\n\nexport const fetchResidentListRequest = (\n  payload: string[]\n): FetchResidentListAction => ({\n  type: FETCH_RESIDENT_LIST_REQUEST,\n  payload,\n});\n\nexport type ResidentsActions =\n  | FetchResidentListAction\n  | FetchResidentListSuccess;\n","export const TERRAIN_VALUES = [\n  \"desert\",\n  \"grasslands\",\n  \"mountains\",\n  \"mountain ranges\",\n  \"jungle\",\n  \"forests\",\n  \"ocean\",\n  \"lakes\",\n  \"cityscape\",\n  \"grassy hills\",\n  \"rainforests\",\n  \"tundra\",\n  \"ice caves\",\n  \"swamp\",\n  \"gas giant\",\n];\n\nexport const PLANET_HEADERS = {\n  name: \"Name\",\n  rotation_period: \"Rotation Period\",\n  orbital_period: \"Orbital Period\",\n  diameter: \"Diameter\",\n  climate: \"Сlimate\",\n  gravity: \"Gravity\",\n  terrain: \"Terrain\",\n  surface_water: \"Surface Water\",\n  film_count: \"Film Count\",\n  residents_count: \"Resident Count\",\n};\n","import { ValidationErrors } from \"final-form\";\nimport { Planet } from \"../../../../../store/features/planets/PlanetsModel\";\n\nexport function validatePlanet(values: Planet): ValidationErrors {\n  const errors: ValidationErrors = {};\n\n  if (!values.name) {\n    errors.name = \"Name should not be empty\";\n  }\n\n  if (values.rotation_period == null || values.rotation_period <= 0) {\n    errors.rotation_period = \"Rotation period should be positive\";\n  }\n\n  if (values.orbital_period == null || values.orbital_period <= 0) {\n    errors.orbital_period = \"Orbital period should be positive\";\n  }\n\n  if (values.diameter == null || values.diameter <= 0) {\n    errors.diameter = \"Planet diameter should be positive\";\n  }\n\n  if (!values.climate) {\n    errors.climate = \"Climate should be specified\";\n  }\n\n  if (!values.gravity) {\n    errors.gravity = \"Gravity should be specified as based on standard value\";\n  }\n\n  if (!values.terrain || values.terrain.length === 0) {\n    errors.terrain = \"Terrain should have at least one value\";\n  }\n\n  if (values.surface_water == null || values.surface_water <= 0) {\n    errors.surface_water = \"Surface water should be positive\";\n  }\n\n  return errors;\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M18.984 6.422l-5.578 5.578 5.578 5.578-1.406 1.406-5.578-5.578-5.578 5.578-1.406-1.406 5.578-5.578-5.578-5.578 1.406-1.406 5.578 5.578 5.578-5.578z\"\n});\n\nfunction SvgClear(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"clear\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgClear);\nexport default __webpack_public_path__ + \"static/media/clear.fd277391.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useCallback, useMemo } from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport IconButton from \"components/IconButton/IconButton\";\nimport { Planet } from \"store/features/planets/PlanetsModel\";\nimport styles from \"./PlanetForm.module.scss\";\nimport { TERRAIN_VALUES, PLANET_HEADERS } from \"./PlanetFormConst\";\nimport { validatePlanet } from \"./PlanetFormValidator\";\nimport { ReactComponent as CloseIcon } from \"assets/clear.svg\";\n\ntype FormInputProps = {\n  name: string;\n  type?: \"text\" | \"number\";\n};\n\nfunction FormInput({ name, type = \"text\" }: FormInputProps) {\n  return (\n    <Field\n      name={name}\n      render={({ input, meta }) => (\n        <div className={styles.formElement}>\n          <label htmlFor={name} className={styles.formElementLabel}>\n            {\n              //@ts-ignore\n              PLANET_HEADERS[name]\n            }\n          </label>\n          <input\n            id={name}\n            {...input}\n            type={type}\n            className={styles.formInput}\n          />\n          {meta.touched && (meta.error || meta.submitError) && (\n            <span className={styles.formErrorLabel}>\n              {meta.error || meta.submitError}\n            </span>\n          )}\n        </div>\n      )}\n    />\n  );\n}\n\ninterface PlanetFormProps {\n  onCloseClick: () => void;\n  planet?: Planet;\n  onSubmit: (planet: Planet) => void;\n}\n\nfunction PlanetForm({ planet, onCloseClick, onSubmit }: PlanetFormProps) {\n  const handleSubmit = useCallback(\n    async (values) => {\n      const { terrain, ...rest } = values;\n      return onSubmit({ ...rest, terrain: terrain.join(\", \") });\n    },\n    [onSubmit]\n  );\n\n  const initialValues = useMemo(() => {\n    if (planet) {\n      return {\n        ...planet,\n        terrain: planet.terrain.split(\", \"),\n      };\n    }\n  }, [planet]);\n\n  return (\n    <div className={styles.formContainer}>\n      <Form\n        onSubmit={handleSubmit}\n        initialValues={initialValues}\n        validate={validatePlanet}\n        render={({ handleSubmit, submitting, pristine, form, errors }) => (\n          <form onSubmit={handleSubmit}>\n            <div className={styles.formHeader}>\n              <h2>EDIT PLANET DETAILS</h2>\n              <IconButton\n                Icon={CloseIcon}\n                title=\"Close\"\n                onClick={onCloseClick}\n                invert={true}\n              />\n            </div>\n\n            <FormInput name=\"name\" />\n            <FormInput name=\"rotation_period\" type=\"number\" />\n            <FormInput name=\"orbital_period\" type=\"number\" />\n            <FormInput name=\"diameter\" type=\"number\" />\n            <FormInput name=\"climate\" />\n            <FormInput name=\"gravity\" />\n            <Field\n              name=\"terrain\"\n              type=\"select\"\n              render={({ input, meta }) => {\n                return (\n                  <div className={styles.formElement}>\n                    <label className={styles.formElementLabel}>Terrain</label>\n                    <select {...input} multiple>\n                      {TERRAIN_VALUES.map((item) => (\n                        <option key={item} value={item}>\n                          {item}\n                        </option>\n                      ))}\n                    </select>\n                    {meta.touched && (meta.error || meta.submitError) && (\n                      <span className={styles.formErrorLabel}>\n                        {meta.error || meta.submitError}\n                      </span>\n                    )}\n                  </div>\n                );\n              }}\n            />\n            <FormInput name=\"surface_water\" type=\"number\" />\n\n            <div className={styles.buttonsBlock}>\n              <button\n                type=\"button\"\n                /*@ts-ignore*/\n                onClick={form.reset}\n                disabled={submitting || pristine}\n                className={styles.actionButton}\n              >\n                Reset\n              </button>\n              <button\n                type=\"submit\"\n                disabled={\n                  submitting || pristine || Object.keys(errors).length > 0\n                }\n                className={styles.actionButton}\n              >\n                Submit\n              </button>\n            </div>\n          </form>\n        )}\n      />\n    </div>\n  );\n}\n\nexport default React.memo(PlanetForm);\n","import React, { useCallback, useEffect } from \"react\";\nimport Modal from \"react-modal\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { fetchPlanetRequest } from \"store/features/planets/PlanetsActions\";\nimport { Planet } from \"store/features/planets/PlanetsModel\";\nimport { RootStoreState } from \"store/rootModel\";\nimport PlanetForm from \"./components/PlanetForm/PlanetForm\";\n\nconst MODAL_STYLES = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    border: \"none\",\n    borderRadius: \"10px\",\n    boxShadow: \"0 0 20px rgba(0, 0, 0, 0.15)\",\n  },\n};\n\ninterface PlanetModalPageProps extends RouteComponentProps {\n  fetchPlanetDetails: (planetId: string) => void;\n  planet?: Planet;\n  planetId: string | null;\n}\n\nfunction PlanetEditorModal({\n  fetchPlanetDetails,\n  planet,\n  history,\n  location,\n  planetId,\n}: PlanetModalPageProps) {\n  const closeModal = useCallback(() => {\n    const queryParams = new URLSearchParams(location.search);\n    queryParams.delete(\"edit\");\n    history.replace({\n      search: queryParams.toString(),\n    });\n  }, [history, location]);\n\n  const onSubmit = useCallback(\n    async (planet: Planet) => {\n      const errors = await new Promise((resolve) =>\n        setTimeout(\n          () =>\n            resolve({\n              name: \"Some server side error message\",\n            }),\n          1000\n        )\n      );\n\n      if (!errors) {\n        closeModal();\n        return;\n      }\n\n      return errors;\n    },\n    [closeModal]\n  );\n\n  useEffect(() => {\n    if (!planet && planetId) {\n      fetchPlanetDetails(planetId);\n    }\n  }, [fetchPlanetDetails, planet, planetId]);\n\n  return (\n    <Modal isOpen={!!planetId} onRequestClose={closeModal} style={MODAL_STYLES}>\n      {planet ? (\n        <PlanetForm\n          onCloseClick={closeModal}\n          planet={planet}\n          onSubmit={onSubmit}\n        />\n      ) : null}\n    </Modal>\n  );\n}\n\nconst mapStateToProps = (\n  state: RootStoreState,\n  ownProps: PlanetModalPageProps\n) => {\n  const params = new URLSearchParams(ownProps.location.search);\n  const planetId = params.get(\"edit\");\n  let planet: Planet | undefined;\n  if (planetId) {\n    planet = state.planets.planetById[planetId];\n  }\n  return {\n    planet: planet,\n    planetId: planetId,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Function) => {\n  return {\n    fetchPlanetDetails: (id: string) => dispatch(fetchPlanetRequest(id)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlanetEditorModal);\n","import React, { lazy, Suspense } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport PlanetEditorModal from \"./features/planets/PlanetEditorModal/PlanetEditorModal\";\n\nconst Planets = lazy(() => import(\"./features/planets/PlanetsListPage\"));\nconst PlanetDetails = lazy(\n  () => import(\"./features/planets/PlanetDetailsPage\")\n);\nconst Films = lazy(() => import(\"./features/films/FilmsPage\"));\nconst Residents = lazy(() => import(\"./features/residents/Residents\"));\n\nexport const App = () => (\n  <Suspense fallback=\"Loading...\">\n    <Switch>\n      <Route exact path=\"/planets\" component={Planets} />\n      <Route exact path=\"/planets/:id\" component={PlanetDetails} />\n      <Route exact path=\"/planets/:id/films\" component={Films} />\n      <Route exact path=\"/planets/:id/residents\" component={Residents} />\n      <Redirect to=\"/planets\" />\n    </Switch>\n    <Route exact path=\"/planets\" component={PlanetEditorModal} />\n  </Suspense>\n);\n\nexport default App;\n","const reportWebVitals = (onPerfEntry?: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FilmsActions } from \"./FilmsActions\";\nimport { FETCH_FILM_LIST_SUCCESS } from \"./FilmsActionTypes\";\nimport { FilmsStoreState } from \"./FilmsModel\";\n\nconst INITIAL_STATE: FilmsStoreState = {\n  filmById: {},\n};\n\nexport const filmsReducer = (\n  state = INITIAL_STATE,\n  action: FilmsActions\n): FilmsStoreState => {\n  switch (action.type) {\n    case FETCH_FILM_LIST_SUCCESS: {\n      return { ...state, filmById: action.payload };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { PlanetsActions } from \"./PlanetsActions\";\nimport {\n  FETCH_PLANET_LIST_SUCCESS,\n  FETCH_PLANET_SUCCESS,\n} from \"./PlanetsActionTypes\";\nimport { Planet, PlanetsMap, PlanetsStoreState } from \"./PlanetsModel\";\n\nconst INITIAL_STATE: PlanetsStoreState = {\n  planetById: {},\n  nextPage: 1,\n  planetsIds: [],\n};\n\nexport const planetsReducer = (\n  state = INITIAL_STATE,\n  action: PlanetsActions\n): PlanetsStoreState => {\n  switch (action.type) {\n    case FETCH_PLANET_LIST_SUCCESS: {\n      const planets = action.payload.planets;\n      const planetById: PlanetsMap = planets.reduce(\n        (result: PlanetsMap, planet: Planet) => {\n          result[planet.id] = planet;\n          return result;\n        },\n        {}\n      );\n      const planetIds: string[] = planets.map((planet) => planet.id);\n      return {\n        ...state,\n        nextPage: action.payload.nextPage,\n        planetById: { ...state.planetById, ...planetById },\n        planetsIds: [...state.planetsIds, ...planetIds],\n      };\n    }\n    case FETCH_PLANET_SUCCESS: {\n      const id = action.payload.id;\n      return {\n        ...state,\n        planetById: { ...state.planetById, [id]: action.payload },\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { ResidentsActions } from \"./ResidentsActions\";\nimport { FETCH_RESIDENT_LIST_SUCCESS } from \"./ResidentsActionTypes\";\nimport { ResidentsStoreState } from \"./ResidentsModel\";\n\nconst INITIAL_STATE: ResidentsStoreState = {\n  residentById: {},\n};\n\nexport const residentsReducer = (\n  state = INITIAL_STATE,\n  action: ResidentsActions\n): ResidentsStoreState => {\n  switch (action.type) {\n    case FETCH_RESIDENT_LIST_SUCCESS: {\n      return { ...state, residentById: action.payload };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { filmsReducer } from \"./features/films/FilmsReducer\";\nimport { planetsReducer } from \"./features/planets/PlanetsReducer\";\nimport { residentsReducer } from \"./features/residents/ResidentsReducer\";\n\nexport const rootReducer = combineReducers({\n  planets: planetsReducer,\n  residents: residentsReducer,\n  films: filmsReducer,\n});\n","import axios from \"axios\";\n\nexport const API = axios.create({\n  baseURL: \"https://swapi.dev/api/\",\n});\n","export function extractId(input: string): string | undefined {\n  const found = input.match(/(\\d*)\\/$/);\n  if (found) {\n    return found[1];\n  }\n}\n\nexport function extractPageNumber(input: string): number | null {\n  const found = input.match(/page=(\\d*)$/);\n  if (found) {\n    return parseInt(found[1], 10);\n  }\n  return null;\n}\n","import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { API } from \"../../../network/api\";\nimport { extractId } from \"../../common/extractId\";\nimport { FetchFilmListRequest, fetchFilmListSuccess } from \"./FilmsActions\";\nimport { FETCH_FILM_LIST_REQUEST } from \"./FilmsActionTypes\";\nimport { FilmsMap } from \"./FilmsModel\";\n\nfunction* fetchFilmsSaga(action: FetchFilmListRequest) {\n  const ids: string[] = action.payload;\n  try {\n    const response = yield all(ids.map((id) => call(API.get, `films/${id}/`)));\n    const filmsByIds: FilmsMap = response.reduce(\n      (result: FilmsMap, { data }: any) => {\n        const id = extractId(data.url);\n        if (id) {\n          result[id] = { ...data, id };\n        }\n        return result;\n      },\n      {}\n    );\n    yield put(fetchFilmListSuccess(filmsByIds));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport function* filmsSagas() {\n  yield all([takeEvery(FETCH_FILM_LIST_REQUEST, fetchFilmsSaga)]);\n}\n","import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { API } from \"../../../network/api\";\nimport { extractId, extractPageNumber } from \"../../common/extractId\";\n\nimport {\n  fetchPlanetListSuccess,\n  fetchPlanetSuccess,\n  RequestPlanetAction,\n  RequestPlanetListAction,\n} from \"./PlanetsActions\";\nimport {\n  FETCH_PLANET_LIST_REQUEST,\n  FETCH_PLANET_REQUEST,\n} from \"./PlanetsActionTypes\";\nimport { Planet } from \"./PlanetsModel\";\n\nfunction mapToState(input: any): Planet | undefined {\n  const planetId = extractId(input.url);\n  if (planetId) {\n    const { residents, films, ...rest } = input;\n    const residentsIds = residents.map(extractId);\n    const filmsIds = films.map(extractId);\n    return { ...rest, id: planetId, residentsIds, filmsIds };\n  }\n}\n\nfunction* fetchPlanetsSaga(action: RequestPlanetListAction) {\n  try {\n    const page = action.payload.page;\n    const {\n      data: { results: planets, next },\n    } = yield call(API.get, `planets?page=${page}`);\n\n    const result: Planet[] = planets.map(mapToState).filter(Boolean);\n\n    let nextPageNumber = next ? extractPageNumber(next) : null;\n\n    yield put(\n      fetchPlanetListSuccess({\n        planets: result,\n        nextPage: nextPageNumber,\n      })\n    );\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* fetchPlanetDetailsSaga(action: RequestPlanetAction) {\n  try {\n    const id = action.payload;\n    const { data } = yield call(API.get, `planets/${id}/`);\n    const planet = mapToState(data);\n    if (planet) {\n      yield put(fetchPlanetSuccess(planet));\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport function* planetsSagas() {\n  yield all([\n    takeEvery(FETCH_PLANET_LIST_REQUEST, fetchPlanetsSaga),\n    takeEvery(FETCH_PLANET_REQUEST, fetchPlanetDetailsSaga),\n  ]);\n}\n","import { all, call, put, takeEvery } from \"redux-saga/effects\";\nimport { API } from \"../../../network/api\";\nimport { extractId } from \"../../common/extractId\";\nimport {\n  FetchResidentListAction,\n  fetchResidentListSuccess,\n} from \"./ResidentsActions\";\nimport { FETCH_RESIDENT_LIST_REQUEST } from \"./ResidentsActionTypes\";\nimport { ResidentsMap } from \"./ResidentsModel\";\n\nexport function* fetchResidentsSaga(action: FetchResidentListAction) {\n  const ids = action.payload;\n  try {\n    const response = yield all(\n      ids.map((id: any) => call(API.get, `people/${id}/`))\n    );\n    const residentsByIds: ResidentsMap = response.reduce(\n      (result: ResidentsMap, { data }: any) => {\n        const id = extractId(data.url);\n        if (id) {\n          result[id] = { ...data, id };\n        }\n        return result;\n      },\n      {}\n    );\n    yield put(fetchResidentListSuccess(residentsByIds));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport function* residentsSagas() {\n  yield all([takeEvery(FETCH_RESIDENT_LIST_REQUEST, fetchResidentsSaga)]);\n}\n","import { all } from \"redux-saga/effects\";\nimport { filmsSagas } from \"./features/films/FilmsSagas\";\nimport { planetsSagas } from \"./features/planets/PlanetsSagas\";\nimport { residentsSagas } from \"./features/residents/ResidentsSagas\";\n\nexport function* watchAllSagas() {\n  yield all([planetsSagas(), residentsSagas(), filmsSagas()]);\n}\n","import { applyMiddleware, createStore, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { RootStoreState } from \"./rootModel\";\nimport { rootReducer } from \"./rootReducer\";\nimport { watchAllSagas } from \"./rootSagas\";\n\nconst configureStore = (initialState: RootStoreState) => {\n  const saga = createSagaMiddleware();\n\n  const composeEnhancer =\n    // @ts-ignore\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  const enhancer = composeEnhancer(applyMiddleware(saga));\n\n  const store = createStore(rootReducer, initialState, enhancer);\n\n  saga.run(watchAllSagas);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal from \"react-modal\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport configureStore from \"./store\";\n\nconst history = createBrowserHistory();\n\nconst initialState = {};\n\n// @ts-ignore\nconst store = configureStore(initialState);\n\nModal.setAppElement(document.querySelector(\"#modal\") as HTMLElement);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router history={history}>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}